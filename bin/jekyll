#!/usr/bin/env ruby
#
# This file was generated by Bundler.
#
# The application 'jekyll' is installed as part of a gem, and
# this file is here to facilitate running it.
#

require 'pathname'
ENV['BUNDLE_GEMFILE'] ||= File.expand_path("../../Gemfile",
  Pathname.new(__FILE__).realpath)

require 'rubygems'
require 'bundler/setup'

require 'jekyll'
require 'rack/contrib/try_static'

# Monkey-patch
module Rack
  class TryStatic
    def call(env)
      orig_path = env['PATH_INFO']
      found = nil
      @try.each do |path|
        resp = @static.call(env.merge!({'PATH_INFO' => orig_path.chomp('/') + path})) # Add #chomp
        break if 404 != resp[0] && found = resp
      end
      found or @app.call(env.merge!('PATH_INFO' => orig_path))
    end
  end
end

# Monkey-patch
module Jekyll
  module Commands
    class Build < Command
      def self.watch(site, options)
        require 'directory_watcher'

        source = options['source']
        destination = options['destination']

        Jekyll::Logger.info "Auto-regeneration:", "enabled"

        dw = DirectoryWatcher.new(File.expand_path('..', source))
        dw.interval = 1
        dw.glob = %w(assets).map{ |x| "#{x}/**/*" }

        dw.add_observer do |*args|
          t = Time.now.strftime("%Y-%m-%d %H:%M:%S")
          puts Jekyll::Logger.formatted_topic("Regenerating:") + "#{args.size} files at #{t} "
          FileUtils.cp_r(%w(assets).map{|dir| File.join(dir, '.')}, source)
        end

        dw.start

        dw = DirectoryWatcher.new(source, :glob => self.globs(source, destination), :pre_load => true)
        dw.interval = 1

        dw.add_observer do |*args|
          t = Time.now.strftime("%Y-%m-%d %H:%M:%S")
          puts Jekyll::Logger.formatted_topic("Regenerating:") + "#{args.size} files at #{t} "
          self.process_site(site)
        end

        dw.start

        unless options['serving']
          trap("INT") do
            puts "     Halting auto-regeneration."
            exit 0
          end

          loop { sleep 1000 }
        end
      end
    end

    class Serve < Command
      def self.process(options)
        require 'webrick'
        # include WEBrick

        destination = options['destination']

        FileUtils.mkdir_p(destination)

        # mime_types_file = File.expand_path('../mime.types', File.dirname(__FILE__))
        # mime_types = WEBrick::HTTPUtils::load_mime_types(mime_types_file)

        # # recreate NondisclosureName under utf-8 circumstance
        # fh_option = WEBrick::Config::FileHandler
        # fh_option[:NondisclosureName] = ['.ht*','~*']

        # s = HTTPServer.new(
        #   :Port => options['port'],
        #   :BindAddress => options['host'],
        #   :MimeTypes => mime_types
        # )

        # s.mount(options['baseurl'], HTTPServlet::FileHandler, destination, fh_option)
        # t = Thread.new { s.start }
        # trap("INT") { s.shutdown }
        # t.join()

        require 'rack'

        mime_types = WEBrick::HTTPUtils::DefaultMimeTypes
        mime_types.store 'js', 'application/javascript'

        app = Rack::Builder.new {
          use Rack::TryStatic, :root => destination, :urls => %w[/], :try => ['.html', 'index.html', '/index.html']
          run lambda{ |_| [404, {'Content-Type' => 'text/html'}, ['HTTP 404 Not Found']] }
        }

        Rack::Server.start({
          :app         => app,
          :server      => 'webrick',
          :Port        => options['port'],
          :BindAddress => options['host'],
          :MimeTypes   => mime_types,
        })
      end
    end
  end
end

load Gem.bin_path('jekyll', 'jekyll')
